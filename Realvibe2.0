import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import os

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("8330900181:AAHCcdEUiSubo_BoHrGPfPNdpZeF5W35L_w")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

waiting_users = set()
active_chats = {}

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
def chat_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí¨ –°–ª–µ–¥—É—é—â–∏–π", callback_data="next"))
    kb.add(InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end"))
    return kb

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.\n\n–ù–∞–∂–º–∏ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
    )

@dp.message_handler(commands=["search"])
async def search(message: types.Message):
    user_id = message.from_user.id

    if user_id in active_chats:
        await message.answer("‚ùó –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")
        return

    if waiting_users:
        partner_id = waiting_users.pop()
        active_chats[user_id] = partner_id
        active_chats[partner_id] = user_id

        await bot.send_message(
            partner_id,
            "üîó –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.",
            reply_markup=chat_keyboard(),
        )
        await bot.send_message(
            user_id,
            "üîó –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.",
            reply_markup=chat_keyboard(),
        )
    else:
        waiting_users.add(user_id)
        await message.answer("üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

@dp.message_handler(commands=["support"])
async def support(message: types.Message):
    await message.answer("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @YourSupportUsername")

# ---------- –°–æ–æ–±—â–µ–Ω–∏—è ----------
@dp.message_handler()
async def chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        try:
            await bot.send_message(partner_id, message.text)
        except:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    else:
        await message.answer("üîé –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ /search.")

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
@dp.callback_query_handler(lambda c: c.data == "end")
async def end_chat(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)
        await bot.send_message(partner_id, "üòî –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
        await call.message.edit_text("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.")
    else:
        await call.message.answer("‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")

@dp.callback_query_handler(lambda c: c.data == "next")
async def next_chat(call: types.CallbackQuery):
    user_id = call.from_user.id

    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)
        await bot.send_message(partner_id, "üòî –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ...")
        await call.message.edit_text("üîÑ –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    else:
        await call.message.answer("üîé –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

    await search(call.message)

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
