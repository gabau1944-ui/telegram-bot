import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = "8330900181:AAHCcdEUiSubo_BoHrGPfPNdpZeF5W35L_w"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–∞—Ä—ã
waiting_users = set()
active_pairs = {}

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_keyboard():
    buttons = [
        [types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
        [types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
    ]
    return types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.\n–ù–∞–∂–º–∏ ¬´üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
        reply_markup=main_keyboard()
    )

# --- –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ---
@dp.message_handler(lambda m: m.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_chat(message: types.Message):
    user_id = message.from_user.id

    if user_id in active_pairs:
        await message.answer("üí¨ –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    if waiting_users:
        partner_id = waiting_users.pop()
        active_pairs[user_id] = partner_id
        active_pairs[partner_id] = user_id

        await bot.send_message(user_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —á–∞—Ç.")
        await bot.send_message(partner_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —á–∞—Ç.")
    else:
        waiting_users.add(user_id)
        await message.answer("‚åõ –û–∂–∏–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ---
@dp.message_handler(lambda m: m.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def end_chat(message: types.Message):
    user_id = message.from_user.id

    if user_id not in active_pairs:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
        return

    partner_id = active_pairs.pop(user_id)
    active_pairs.pop(partner_id, None)

    await message.answer("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.")
    await bot.send_message(partner_id, "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")

# --- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(content_types=types.ContentType.ANY)
async def relay_message(message: types.Message):
    user_id = message.from_user.id

    if user_id not in active_pairs:
        return

    partner_id = active_pairs[user_id]
    try:
        if message.text:
            await bot.send_message(partner_id, message.text)
        elif message.photo:
            await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
        elif message.voice:
            await bot.send_voice(partner_id, message.voice.file_id, caption=message.caption)
        elif message.sticker:
            await bot.send_sticker(partner_id, message.sticker.file_id)
        elif message.video:
            await bot.send_video(partner_id, message.video.file_id, caption=message.caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
